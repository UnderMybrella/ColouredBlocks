package org.abimon.mods.minecraft.colouredBlocks;

import java.awt.Color;
import java.util.Arrays;

import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.InventoryCrafting;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;

public class ColouredRecipes implements IRecipe 
{

	public static final ItemStack[][] ESSENSE_RECIPE = new ItemStack[][]{{new ItemStack(Items.dye), new ItemStack(Items.dye), new ItemStack(Items.dye)}, 
		{new ItemStack(Items.dye), new ItemStack(Items.sugar), new ItemStack(Items.dye)},
		{new ItemStack(Items.dye), new ItemStack(Items.dye), new ItemStack(Items.dye)}};

	@Override
	public boolean matches(InventoryCrafting var1, World var2) 
	{
		return getCraftingResult(var1) != null;
	}

	public boolean checkRecipe(ItemStack[][] items, ItemStack[][] recipe, boolean ignoreDamage, boolean ignoreNBT)
	{
		for(int x = 0; x < 3; x++)
			for(int y = 0; y < 3; y++)
			{
				ItemStack item = items[x][y];
				ItemStack recipeItem = recipe[x][y];
				if(item == null)
					if(recipeItem == null)
						continue;
					else
						return false;
				if(recipeItem == null)
					return false;
				boolean sameItem = item.getItem() == recipeItem.getItem();
				boolean sameDamage = item.getItemDamage() == recipeItem.getItemDamage() || ignoreDamage;
				boolean sameNBT = (item.hasTagCompound() ? (item.getTagCompound() + "") : "").equalsIgnoreCase(recipeItem.hasTagCompound() ? (recipeItem.getTagCompound() + "") : "") || ignoreNBT;
				if(sameItem && sameDamage && sameNBT)
					continue;
				else
					return false;
			}
		return true;
	}

	public ItemStack[][] getItems(InventoryCrafting var1)
	{
		ItemStack[][] items = new ItemStack[3][3];
		for(int x = 0; x < 3; x++)
			for(int y = 0; y < 3; y++)
				items[x][y] = var1.getStackInRowAndColumn(x, y);
		return items;
	}

	@Override
	public ItemStack getCraftingResult(InventoryCrafting var1) 
	{
		boolean breaking = false;
		ItemStack[][] items = getItems(var1);

		boolean essense = checkRecipe(items, ESSENSE_RECIPE, true, true);
		ItemStack returning = null;
		ItemStack colouring = null;
		
		int redChange = 0;
		int greenChange = 0;
		int blueChange = 0;
		
		boolean invert = false;
		
		for(ItemStack[] itemStacks : items)
		{
			for(ItemStack item : itemStacks)
			{
				if(item == null)
					continue;
				if(item.getItem() == ColouredBlocks.colouringEssense)
					if(colouring == null)
						colouring = item;
					else
					{
						colouring = null;
						breaking = true;
						break;
					}
				Integer[] changes = ColouredBlocks.itemstackToColourAdditions.get(ColouredBlocks.represent(item));
				System.out.println(ColouredBlocks.represent(item) + ", " + changes + ", " + ColouredBlocks.itemstackToColourAdditions);
				if(changes == null)
					continue;
				redChange += changes[0];
				greenChange += changes[1];
				blueChange += changes[2];
				if(changes[0] == 0 && changes[1] == 0 && changes[2] == 0)
					invert = true;
			}
			if(breaking)
				break;
		}
		
		if(invert)
		{
			redChange *= -1;
			greenChange *= -1;
			blueChange *= -1;
		}
		
		breaking = false;
		
		if(colouring != null)
		{
			returning = new ItemStack(ColouredBlocks.colouringEssense);
			returning.setTagCompound(new NBTTagCompound());
			NBTTagCompound nbt = colouring.getTagCompound();
			int oldRed = nbt.getInteger("Red");
			int oldGreen = nbt.getInteger("Green");
			int oldBlue = nbt.getInteger("Blue");
			int red = oldRed + redChange;
			int green = oldGreen + greenChange;
			int blue = oldBlue + blueChange;
			returning.getTagCompound().setInteger("Red", red);
			returning.getTagCompound().setInteger("Green", green);
			returning.getTagCompound().setInteger("Blue", blue);
			returning.getTagCompound().setInteger("RGB", new Color(red, green, blue).getRGB());
		}
		
		if(essense)
		{
			returning = new ItemStack(ColouredBlocks.colouringEssense);
			returning.setTagCompound(new NBTTagCompound());
			returning.getTagCompound().setInteger("Red", 0);
			returning.getTagCompound().setInteger("Green", 0);
			returning.getTagCompound().setInteger("Blue", 0);
			returning.getTagCompound().setInteger("RGB", Color.BLACK.getRGB());
		}
		return returning;
	}

	@Override
	public int getRecipeSize() {
		return 9;
	}

	@Override
	public ItemStack getRecipeOutput() {
		return new ItemStack(Blocks.diamond_block, 64, 0);
	}

}
