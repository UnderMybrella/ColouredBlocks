package org.abimon.mods.minecraft.dnc;

import java.lang.reflect.Method;

import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.DamageSource;
import net.minecraft.util.IChatComponent;
import net.minecraft.util.StatCollector;

public class CustomDamageSource extends DamageSource{

	public String deathMessage = "%1$s was violently murdered by %2$s. Both will now have to pay their respects to Science";
	public String playerMessage = deathMessage;
	
	public Entity damageSourceEntity = null;
	
	public CustomDamageSource(String par1Str, String deathMessage, String playerMessage) 
	{
		super(par1Str);
		this.deathMessage = deathMessage;
		this.playerMessage = playerMessage;
	}
	
	public CustomDamageSource newInstanceWithEntity(Entity e)
	{
		return CustomDamageSource.createFromJSONString((JSONObject) JSONValue.parse(this.toJSONString())).setEntity(damageSourceEntity);
	}
	
	public CustomDamageSource setEntity(Entity damageSourceEntity)
	{
		this.damageSourceEntity = damageSourceEntity;
		return this;
	}
	
    public Entity getEntity()
    {
        return this.damageSourceEntity;
    }
	
    public IChatComponent func_151519_b(EntityLivingBase p_151519_1_)
    {
    	if(getEntity() != null)
    		return entityChat(p_151519_1_);
        EntityLivingBase entitylivingbase1 = p_151519_1_.func_94060_bK();
        String s = deathMessage;
        String s1 = playerMessage;
        return entitylivingbase1 != null && StatCollector.canTranslate(s1) ? new ChatComponentTranslation(s1, new Object[] {p_151519_1_.func_145748_c_(), entitylivingbase1.func_145748_c_()}): new ChatComponentTranslation(s, new Object[] {p_151519_1_.func_145748_c_()});
    }
    
    public IChatComponent entityChat(EntityLivingBase p_151519_1_)
    {
        ItemStack itemstack = this.damageSourceEntity instanceof EntityLivingBase ? ((EntityLivingBase)this.damageSourceEntity).getHeldItem() : null;
        String s = "death.attack." + this.damageType;
        String s1 = s + ".item";
        return itemstack != null && itemstack.hasDisplayName() && StatCollector.canTranslate(s1) ? new ChatComponentTranslation(s1, new Object[] {p_151519_1_.func_145748_c_(), this.damageSourceEntity.func_145748_c_(), itemstack.func_151000_E()}): new ChatComponentTranslation(s, new Object[] {p_151519_1_.func_145748_c_(), this.damageSourceEntity.func_145748_c_()});
    }
    
    public String toString()
    {
    	return toJSONString();
    }
    
    public String toJSONString()
    {
    	String s = "{\"damageType\":\"" + damageType + "\", \"deathMessage\":\"" + deathMessage + "\", \"playerMessage\":\"" + playerMessage + "\", \"isProjectile\":" + isProjectile() + ", \"isExplosion\":" + isExplosion() + ", \"isUnblockable\":" + isUnblockable() + ", \"canHarmInCreative\":" + canHarmInCreative() + ", \"isDamageAbsolute\":" + isDamageAbsolute() + ", \"isFireDamage\":" + isFireDamage() + ", \"isDifficultyScaled\":" + isDifficultyScaled() + ", \"isMagicDamage\":" + isMagicDamage() + "}";
    	return s;
    }
    
    public static CustomDamageSource createFromJSONString(JSONObject json)
    {
    	CustomDamageSource damage = new CustomDamageSource("name", "die", "die");
    	damage.damageType = (String) json.get("damageType");
    	damage.deathMessage = (String) json.get("deathMessage");
    	damage.playerMessage = (String) json.get("playerMessage");
    	if((Boolean) json.get("isProjectile"))
    		damage.setProjectile();
    	if((Boolean) json.get("isExplosion"))
    		damage.setExplosion();
    	if((Boolean) json.get("canHarmInCreative"))
    		damage.setDamageAllowedInCreativeMode();
    	if((Boolean) json.get("isUnblockable"))
    		damage.setDamageBypassesArmor();
    	if((Boolean) json.get("isDamageAbsolute"))
    		damage.setDamageIsAbsolute();
    	if((Boolean) json.get("isFireDamage"))
    		damage.setFireDamage();
    	if((Boolean) json.get("isDifficultyScaled"))
    		damage.setDifficultyScaled();
    	if((Boolean) json.get("isMagicDamage"))
    		damage.setMagicDamage();
    	return damage;
    }
}
