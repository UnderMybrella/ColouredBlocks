package org.abimon.mods.minecraft.deco;

import java.util.HashMap;

import cpw.mods.fml.common.registry.GameData;
import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.InventoryCrafting;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;

public class DecoRecipes implements IRecipe {

	public static final String[][] STRUCTURE_BLOCK = new String[][]{{"brick","brick","brick"},{"brick","BLOCK","brick"},{"brick","brick","brick"}};
	public static HashMap<String, String> ITEM_MAPPINGS = new HashMap<String, String>();
	
	static{
		ITEM_MAPPINGS.put("brick", Items.brick.getUnlocalizedName());
	}
	
	@Override
	//
	public boolean matches(InventoryCrafting var1, World var2) {
		if(getCraftingResult(var1) != null)
			return true;
		return false;
	}
	
	public NBTTagCompound recipeEqualsWithBlocks(Item[][] items, String[][] recipe)
	{
		int recipeHit = 0;
		NBTTagCompound data = new NBTTagCompound();
		Object obj = null;
		for(int x = 0; x < 3; x++)
			for(int y = 0; y < 3; y++)
			{
				if(recipe[x][y].equalsIgnoreCase("BLOCK") && items[x][y] instanceof ItemBlock && (obj == null || ((Block) obj).getUnlocalizedName().equals(((ItemBlock) items[x][y]).field_150939_a.getUnlocalizedName())))
				{
					obj = items[x][y];
					recipeHit++;
				}
				String required = recipe[x][y];
				if(ITEM_MAPPINGS.containsKey(required))
					required = ITEM_MAPPINGS.get(required);
				if(items[x][y] != null && items[x][y].getUnlocalizedName().equals(required))
					recipeHit++;
			}
		if(recipeHit == 9)
		{
			data.setString("Item", GameData.getBlockRegistry().getNameForObject(((ItemBlock) obj).field_150939_a));
			return data;
		}
		else
			return null;
	}
	
	public boolean itemEquals(Item one, Item two)
	{
		if(one == null || two == null)
			return false;
		if(one.getUnlocalizedName().equals(two.getUnlocalizedName()))
			return true;
		return false;
	}

	@Override
	public ItemStack getCraftingResult(InventoryCrafting var1) {
		if(var1.getSizeInventory() == 9)
		{
			Item[][] items = new Item[3][3];
			for(int x = 0; x < 3; x++)
				for(int y = 0; y < 3; y++)
				{
					ItemStack itm = var1.getStackInRowAndColumn(x, y);
					if(itm != null)
						items[x][y] = itm.getItem();
					else
						items[x][y] = null;
				}
			
			NBTTagCompound structure = recipeEquals(items, STRUCTURE_BLOCK);
			if(structure != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoBlock);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", structure.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				item.setTagCompound(nbt);
				return item;
			}
		}
		return null;
	}

	@Override
	public int getRecipeSize() {
		return 9;
	}

	@Override
	public ItemStack getRecipeOutput() {
		return null;
	}

}
