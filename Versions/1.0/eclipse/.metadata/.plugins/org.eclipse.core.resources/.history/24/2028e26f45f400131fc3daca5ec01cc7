package org.abimon.mods.minecraft.dnc;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Set;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.command.CommandBase;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.EnumAction;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.item.crafting.ShapedRecipes;
import net.minecraft.item.crafting.ShapelessRecipes;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.potion.Potion;
import net.minecraft.server.MinecraftServer;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.DamageSource;
import cpw.mods.fml.client.registry.RenderingRegistry;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.GameData;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.common.registry.VillagerRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

// /give @a minecraft:potion 64 16384 {CustomPotionEffects:[{Id:25}]}
@Mod(modid = DungeonsAndCreepers.MODID, version = DungeonsAndCreepers.VERSION, name = DungeonsAndCreepers.NAME)
public class DungeonsAndCreepers
{

	public static final Potion ender = new PotionDnC(24, false, Color.CYAN.getRGB()).setPotionName("dnc.potion.ender");
	public static final Potion purging = new PotionDnC(25, false, new Color(0, 255, 128).getRGB()).setPotionName("dnc.potion.purge");
	public static final Potion combustion = new PotionDnC(26, false, new Color(255, 0, 63).getRGB()).setPotionName("dnc.potion.combustion");
	public static final Potion coolant = new PotionDnC(27, false, new Color(0, 0, 128).getRGB()).setPotionName("dnc.potion.cooling");
	public static final Potion microsoft = new PotionDnC(28, false, new Color(0, 0, 128).getRGB()).setPotionName("dnc.potion.microsoft");

	public static final HashMap<String, CustomDamageSource> damageSources = new HashMap<String, CustomDamageSource>();

	public static final String MODID = "dnc";
	public static final String VERSION = "1.0";
	public static final String NAME = "Dungeons and Creepers";

	public static HashMap<String, Long> weights = new HashMap<String, Long>();
	public static HashMap<String, LinkedList<IRecipe>> recipes = new HashMap<String, LinkedList<IRecipe>>();

	public static TextureMap items = new TextureMap(1, "textures/items");

	public static File damageSourcesFile;

	public static JSONObject configFile;

	public static CommandBase[] commands = new CommandBase[]{new CommandCreateDamageSource(), new CommandUseCommand()};

	public static final CreativeTabs tabDNC = new CreativeTabs(CreativeTabs.getNextID(), "dnc:creativeTab")
	{
		@SideOnly(Side.CLIENT)
		public Item getTabIconItem()
		{
			return Items.skull;
		}
	};

	public static Block alchemicalStation = new BlockAlchemical().setBlockName("alchemicalStation");

	public static final Item dnc = new ItemDnC();

	public static Long getWeight(ItemStack item)
	{
		Long straightWeight = weights.get(represent(item));
		if(straightWeight == null)
		{
			straightWeight = 0L;
			int rCount = 0;
			if(recipes.containsKey(represent(item)))
				for(IRecipe ir : recipes.get(represent(item)))
				{
					System.out.println(ir);
					Long recipeWeight = 0L;

					if(ir instanceof ShapedRecipes)
					{
						ShapedRecipes sr = (ShapedRecipes) ir;
						for(ItemStack iItem : sr.recipeItems)
						{
							if(iItem == null)
								continue;
							System.out.println(iItem.stackSize);
							recipeWeight += (getWeight(iItem) * iItem.stackSize);
							System.out.println("R: " + recipeWeight);
						}
						recipeWeight /= sr.getRecipeOutput().stackSize;
						System.out.println(recipeWeight);
					}

					if(ir instanceof ShapelessRecipes)
					{
						ShapelessRecipes sr = (ShapelessRecipes) ir;
						for(Object oItem : sr.recipeItems)
						{
							if(oItem == null)
								continue;
							ItemStack iItem = (ItemStack) oItem;
							recipeWeight += (getWeight(iItem) * iItem.stackSize);
						}
						recipeWeight /= sr.getRecipeOutput().stackSize;
					}

					straightWeight += recipeWeight;
					if(recipeWeight > 0)
						rCount++;
				}
			if(rCount > 0)
				straightWeight /= rCount;
		}
		System.out.println("S: " + straightWeight);
		return straightWeight;
	}

	public static String represent(Block block)
	{
		return represent(new ItemStack(block));
	}

	public static String represent(Block block, int damage)
	{
		return represent(new ItemStack(block, 1, damage));
	}

	public static String represent(Block block, int[] damages)
	{
		String rep = "";
		for(int i = 0; i < damages.length; i++)
			rep += represent(block, damages[i]) + "\n";
		return rep;
	}

	public static String represent(Item block)
	{
		return represent(new ItemStack(block));
	}

	public static String represent(Item block, int damage)
	{
		return represent(new ItemStack(block, 1, damage));
	}

	public static String represent(ItemStack item)
	{
		boolean isBlock = item.getItem() instanceof ItemBlock;
		String texture = "Name: " +  (isBlock ? GameData.getBlockRegistry().getNameForObject(((ItemBlock) item.getItem()).field_150939_a) : GameData.getItemRegistry().getNameForObject(item.getItem()));
		texture += "|" + item.getTagCompound();
		texture += "|" + item.getItemDamage();
		return texture;
	}

	public static void writeDefaults(File weights)
	{
		try
		{
			weights.createNewFile();
			//Do a dump of stuff
			String defaultWeights = getDefaultWeights();
			FileOutputStream fos = new FileOutputStream(weights);
			fos.write(defaultWeights.getBytes());
			fos.close();
		}
		catch(Throwable th){
			th.printStackTrace();
		}
	}

	@EventHandler
	public void preinit(FMLPreInitializationEvent event)
	{
		File dncFolder = new File("DnC");
		if(!dncFolder.exists())
			dncFolder.mkdir();
		File weights = new File(dncFolder.getAbsolutePath() + File.separatorChar + "Weights.txt");
		if(!weights.exists())
		{
			writeDefaults(weights);
		}
		try
		{
			DataInputStream dis = new DataInputStream(new FileInputStream(weights));
			byte[] data = new byte[dis.available()];
			dis.readFully(data);
			String weight = new String(data);
			if(weight.equals(getDefaultWeights()))
			{
				String[] lines = weight.split("\n");
				dis.close();
				for(String line : lines)
				{
					String[] parts = line.split("=");
					if(parts.length < 2)
					{
						continue;
					}
					DungeonsAndCreepers.weights.put(parts[0], Long.parseLong(parts[1]));
				}
				System.out.println(DungeonsAndCreepers.weights);
			}
			else if(weight.split("\n")[0].equals("DefaultWeights (REMOVE THIS IF YOU ARE CHANGING WEIGHTS!!!)"))
			{
				System.err.println("Different config file. Restoring:");
				weights.delete();
				writeDefaults(weights);
				preinit(event);
			}

			damageSourcesFile = new File(dncFolder.getAbsolutePath() + File.separatorChar + "DamageSources.json");
			if(damageSourcesFile.exists())
			{
				DataInputStream damageInput = new DataInputStream(new FileInputStream(damageSourcesFile));
				byte[] damageData = new byte[damageInput.available()];
				damageInput.readFully(damageData);
				damageInput.close();

				String json = new String(damageData);
				System.out.println(json);
				JSONObject jObject = (JSONObject) JSONValue.parse(json);
				System.out.println(jObject);
				JSONObject jDamageData = (JSONObject) jObject.get("DamageData");
				for(Object o : (JSONArray) jObject.get("DamageSources"))
					damageSources.put((String) o, CustomDamageSource.createFromJSONString((JSONObject) jDamageData.get(o))); 
			}
			else
			{
				damageSourcesFile.createNewFile();
				damageSources.put("defaultDamage", new CustomDamageSource("defaultDamage", "%1$s lost all their life", "%1$s lost all their life because of %2$s", "%1$s lost all their life because of %2$s. Why %2$s used a %3$s we'll never know"));
			}

			doConfig(dncFolder);
		}
		catch(Exception e){
			e.printStackTrace();
		}

	}

	private static JSONObject getDefaultConfig()
	{
		JSONObject json = new JSONObject();
		JSONObject guide = new JSONObject();
		guide.put("levelRequiredForUseCommand", "The required level for the 'Use' command. 1 is a standard user, 2 is commandblock, 4 is OP");
		json.put("guideToThisConfig", guide);
		return json;
	}

	public void doConfig(File dncFolder)
	{
		try
		{
			File config = new File(dncFolder.getAbsolutePath() + File.separatorChar + "Config.json");
			if(config.exists())
			{
				DataInputStream damageInput = new DataInputStream(new FileInputStream(config));
				byte[] damageData = new byte[damageInput.available()];
				damageInput.readFully(damageData);
				damageInput.close();

				String json = new String(damageData).replace("\t", "").replace("\n", "");
				JSONObject jObject = (JSONObject) JSONValue.parse(json);
				configFile = jObject;
			}
			else
			{
				config.createNewFile();
				DataOutputStream dos = new DataOutputStream(new FileOutputStream(config));
				dos.write(outputNicely(getDefaultConfig()).getBytes());
				dos.close();
			}
		}
		catch(Exception e)
		{
			
		}
	}

	public static String outputNicely(JSONObject json)
	{
		String jString = json.toJSONString();
		String nicely = "";
		int level = 0;
		boolean inStatementSingle = false;
		boolean inStatementDouble = false;
		for(char c : jString.toCharArray())
		{
			if(c == '"')
				inStatementDouble = !inStatementDouble;
			if(c == '\'')
				inStatementSingle = !inStatementSingle;
			if(inStatementSingle || inStatementDouble)
			{
				nicely += c;
				continue;
			}
			if(c == '{')
				level++;
			if(c == '}')
			{
				level--;
				nicely += "\n";
				for(int i = 0; i < level; i++)
					nicely += "\t";
			}
			nicely += c;
			if(c == '{'|| c == ',')
			{
				nicely += "\n";

				for(int i = 0; i < level; i++)
					nicely += "\t";
			}
		}
		return nicely;
	}

	private static String getDefaultWeights() {
		String str = "DefaultWeights (REMOVE THIS IF YOU ARE CHANGING WEIGHTS!!!)\n";
		str += represent(Blocks.stone) + "=" + 2700 + "\n";
		str += represent(Blocks.grass) + "=" + 1220 + "\n";
		str += represent(Blocks.cobblestone) + "=" + 2700 + "\n";
		str += represent(Blocks.dirt) + "=" + 1220 + "\n";
		str += represent(Blocks.log, new int[]{0, 1, 2, 3}) + "=" + 670 + "\n";
		str += represent(Blocks.log2, new int[]{0, 1, 2, 3}) + "=" + 670 + "\n";
		str += represent(Blocks.sapling, new int[]{0, 1, 2, 3}) + "=" + 7 + "\n";
		str += represent(Blocks.water) + "=" + 1000 + "\n";
		str += represent(Blocks.flowing_water) + "=" + 1000 + "\n";
		str += represent(Blocks.flowing_lava) + "=" + 2725 + "\n";
		str += represent(Blocks.lava) + "=" + 2725 + "\n";
		str += represent(Blocks.sand) + "=" + 1281 + "\n";
		str += represent(Blocks.gravel) + "=" + 1201 + "\n";
		str += represent(Blocks.gold_ore) + "=" + 3771 + "\n";
		str += represent(Blocks.iron_ore) + "=" + 3137 + "\n";
		str += represent(Blocks.coal_ore) + "=" + 2775 + "\n";
		str += represent(Blocks.leaves) + "=" + 2775 + "\n";
		str += represent(Blocks.leaves2) + "=" + 2775 + "\n";
		return str;
	}

	public static String getName(Block b)
	{
		return GameData.getBlockRegistry().getNameForObject(b);
	}

	@EventHandler
	public void init(FMLInitializationEvent event)
	{
		new WeightThread().start();
		GameRegistry.registerItem(dnc, "baublesItems");
		GameRegistry.registerBlock(alchemicalStation, "alchemicalStation");
		GameRegistry.registerTileEntity(TileEntityAlchemical.class, "alchemicalTileEntity");
	}

	@EventHandler
	public void postinit(FMLPostInitializationEvent event)
	{
		for(Object o : EnumAction.values())
			System.out.println(o);
		for(Object o : CraftingManager.getInstance().getRecipeList())
		{
			IRecipe ir = (IRecipe) o;
			if(ir == null)
				continue;
			if(ir.getRecipeOutput() == null)
				continue;
			String item = represent(ir.getRecipeOutput());
			LinkedList<IRecipe> r = recipes.get(item);
			if(r == null)
				r = new LinkedList<IRecipe>();
			r.add(ir);
			recipes.put(item, r);
		}

		Minecraft.getMinecraft().renderEngine.loadTextureMap(TextureMap.locationItemsTexture, items);

		Runtime.getRuntime().addShutdownHook(new Thread("DungeonsAndCreepersSaving"){
			public void run()
			{
				JSONObject json = new JSONObject();
				json.put("DamageData", DungeonsAndCreepers.damageSources);
				JSONArray array = new JSONArray();
				for(String s : DungeonsAndCreepers.damageSources.keySet())
					array.add(s);
				json.put("DamageSources", array);
				try
				{
					DataOutputStream dos = new DataOutputStream(new FileOutputStream(DungeonsAndCreepers.damageSourcesFile));
					dos.write(json.toJSONString().getBytes());
					dos.close();
				}
				catch(Exception e)
				{
					System.out.println("404: Termination not found. Or there was an error. Probably this one:");
					String error = e.getLocalizedMessage();
					for(StackTraceElement ste : e.getStackTrace())
						error += "\t" + ste.toString();
					System.err.println(error);
				}
				System.out.println("Goodbye World!");
			}
		});

	}

	/** Removes an enchantment from the possible enchantments 
	 *	@param enchantment - The enchantment to remove
	 *	@param removeFromBooks - Should the enchantment be removed from books?
	 *	@param removeFromTools - Should the enchantment be removed from tools?
	 */
	public static void removeEnchantment(Enchantment enchantment, boolean removeFromBooks, boolean removeFromTools)
	{
		if(removeFromBooks)
			Enchantment.enchantmentsBookList[enchantment.effectId] = null;
		if(removeFromTools)
			Enchantment.enchantmentsList[enchantment.effectId] = null;
	}
}
