package org.abimon.mods.minecraft.deco;

import java.util.ArrayList;
import java.util.HashMap;

import cpw.mods.fml.common.registry.GameData;
import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.InventoryCrafting;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;

public class DecoRecipes implements IRecipe {

	public static final String[][] STRUCTURE_BLOCK = new String[][]{{"brick","brick","brick"},{"brick","BLOCK","brick"},{"brick","brick","brick"}};
	public static final String[][] SLAB_BLOCK = new String[][]{{"STRUCTUREBLOCK", "", ""}, {"STRUCTUREBLOCK", "", ""}, {"STRUCTUREBLOCK", "", ""}};
	public static final String[][] SLAB_BLOCK_TWO = new String[][]{{"", "STRUCTUREBLOCK", ""}, {"", "STRUCTUREBLOCK", ""}, {"", "STRUCTUREBLOCK", ""}};
	public static final String[][] SLAB_BLOCK_THREE = new String[][]{{"", "", "STRUCTUREBLOCK"}, {"", "", "STRUCTUREBLOCK"}, {"", "", "STRUCTUREBLOCK"}};
	public static final String[][] STAIR_BLOCK = new String[][]{{"STRUCTUREBLOCK", "STRUCTUREBLOCK", "STRUCTUREBLOCK"}, {"", "STRUCTUREBLOCK", "STRUCTUREBLOCK"}, {"", "", "STRUCTUREBLOCK"}};
	public static final String[][] FENCE_BLOCK = new String[][]{{"", "STRUCTUREBLOCK", "STRUCTUREBLOCK"}, {"", "STRUCTUREBLOCK", "STRUCTUREBLOCK"}, {"", "STRUCTUREBLOCK", "STRUCTUREBLOCK"}};
	public static final String[][] TEMPLATE = new String[][]{{"", "", ""}, {"", "", ""}, {"", "", ""}};
	public static HashMap<String, String> ITEM_MAPPINGS = new HashMap<String, String>();

	static{
		ITEM_MAPPINGS.put("brick", Items.brick.getUnlocalizedName());
	}

	@Override
	//
	public boolean matches(InventoryCrafting var1, World var2) {
		if(getCraftingResult(var1) != null)
			return true;
		return false;
	}

	public NBTTagCompound recipeEqualsWithBlock(Item[][] items, String[][] recipe, int[][] damage, ItemStack[][] itemstacks)
	{
		try
		{
			int recipeHit = 0;
			NBTTagCompound data = new NBTTagCompound();
			Object obj = null;
			HashMap<Integer, Integer> damageValues = new HashMap<Integer, Integer>(9);
			int meta = 0;
			for(int x = 0; x < 3; x++)
				for(int y = 0; y < 3; y++)
				{
					if(items[y][x] == null)
					{
						if(recipe[y][x].equals(""))
							recipeHit++;
						else
							System.out.println(recipe[y][x]);
						continue;
					}
					if(recipe[y][x].equalsIgnoreCase("BLOCK") && items[y][x] instanceof ItemBlock && (obj == null || (((Block) obj).getUnlocalizedName().equals(((ItemBlock) items[y][x]).field_150939_a.getUnlocalizedName()))))
					{
						obj = items[y][x];
						recipeHit++;
					}
					else if(recipe[y][x].equalsIgnoreCase("STRUCTUREBLOCK") && items[y][x] instanceof DecoItem && itemstacks[y][x].getTagCompound().getInteger("Type") == 2 && (obj == null || GameData.getBlockRegistry().getNameForObject(((Block) obj)).equals(itemstacks[y][x].getTagCompound().getString("Itemstack"))))
					{
						obj = GameData.getBlockRegistry().getObject(itemstacks[y][x].getTagCompound().getString("Itemstack"));
						recipeHit++;
					}
					String required = recipe[y][x];
					if(ITEM_MAPPINGS.containsKey(required))
						required = ITEM_MAPPINGS.get(required);
					if(items[y][x] != null && items[y][x].getUnlocalizedName().equals(required))
						recipeHit++;
					if(damageValues.containsKey(damage[y][x]))
					{
						int old = damageValues.get(damage[y][x]);
						damageValues.put(damage[y][x], old++);
					}
					else
						damageValues.put(damage[y][x], 1);
				}
			int highestNum = 0;
			int highestCount = 0;
			for(int i : damageValues.keySet())
				if(damageValues.get(i) > highestCount)
				{
					highestNum = i;
					highestCount = damageValues.get(i);
				}
			meta = highestNum;
			if(recipeHit == 9)
			{
				data.setBoolean("IsBlock", true);
				if(obj instanceof ItemBlock)
					data.setString("Item", GameData.getBlockRegistry().getNameForObject(((ItemBlock) obj).field_150939_a));
				else if(obj instanceof Block)
					data.setString("Item", GameData.getBlockRegistry().getNameForObject((Block) obj));
				else
				{
					System.out.println(obj.getClass().getSimpleName());
					data.setString("Item", GameData.getBlockRegistry().getNameForObject(Blocks.dirt));
				}
				data.setInteger("Meta", meta);
				System.out.println(data.getString("Item"));
				return data;
			}
			else
				return null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public boolean itemEquals(Item one, Item two)
	{
		if(one == null || two == null)
			return false;
		if(one.getUnlocalizedName().equals(two.getUnlocalizedName()))
			return true;
		return false;
	}

	@Override
	public ItemStack getCraftingResult(InventoryCrafting var1) {
		if(var1.getSizeInventory() == 9)
		{
			Item[][] items = new Item[3][3];
			int[][] damage = new int[3][3];
			ItemStack[][] itemstacks = new ItemStack[3][3];
			for(int x = 0; x < 3; x++)
				for(int y = 0; y < 3; y++)
				{
					ItemStack itm = var1.getStackInRowAndColumn(x, y);
					if(itm != null)
					{
						items[x][y] = itm.getItem();
						damage[x][y] = itm.getItemDamage();
						itemstacks[x][y] = itm;
					}
					else
					{
						items[x][y] = null;
						damage[x][y] = 0;
						itemstacks[x][y] = null;
					}
				}

			NBTTagCompound stair = recipeEqualsWithBlock(items, STAIR_BLOCK, damage, itemstacks);
			if(stair != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoPlacer);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", stair.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				nbt.setInteger("Type", 0);
				item.setTagCompound(nbt);
				return item;
			}
			
			NBTTagCompound slab = recipeEqualsWithBlock(items, SLAB_BLOCK, damage, itemstacks);
			if(slab != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoPlacer);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", slab.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				nbt.setInteger("Type", 1);
				item.setTagCompound(nbt);
				return item;
			}
			
			slab = recipeEqualsWithBlock(items, SLAB_BLOCK_TWO, damage, itemstacks);
			if(slab != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoPlacer);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", slab.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				nbt.setInteger("Type", 1);
				item.setTagCompound(nbt);
				return item;
			}
			
			slab = recipeEqualsWithBlock(items, SLAB_BLOCK_THREE, damage, itemstacks);
			if(slab != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoPlacer);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", slab.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				nbt.setInteger("Type", 1);
				item.setTagCompound(nbt);
				return item;
			}
			
			NBTTagCompound structure = recipeEqualsWithBlock(items, STRUCTURE_BLOCK, damage, itemstacks);
			if(structure != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoPlacer);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", structure.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				nbt.setInteger("Type", 2);
				item.setTagCompound(nbt);
				return item;
			}
			
			NBTTagCompound fence = recipeEqualsWithBlock(items, FENCE_BLOCK, damage, itemstacks);
			if(fence != null)
			{
				ItemStack item = new ItemStack(DecorationMod.decoPlacer);
				NBTTagCompound nbt = new NBTTagCompound();
				nbt.setString("Itemstack", fence.getString("Item"));
				nbt.setBoolean("IsBlock", true);
				nbt.setInteger("Type", 3);
				item.setTagCompound(nbt);
				return item;
			}
			
		}
		return null;
	}

	@Override
	public int getRecipeSize() {
		return 9;
	}

	@Override
	public ItemStack getRecipeOutput() {
		return null;
	}

}
