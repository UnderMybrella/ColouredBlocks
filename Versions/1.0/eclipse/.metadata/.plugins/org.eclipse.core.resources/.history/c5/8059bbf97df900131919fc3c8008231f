package org.abimon.mods.minecraft.colouredBlocks;

import java.awt.Color;
import java.util.Random;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.block.ITileEntityProvider;
import net.minecraft.block.material.Material;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.IIcon;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;

public class BlockColoured extends Block implements ITileEntityProvider, IColourable{

	public BlockColoured() {
		super(Material.cake);
	}

	@Override
	public TileEntity createNewTileEntity(World var1, int var2) {
		return new TileEntityColoured();
	}
	
    @Override
    public boolean onBlockEventReceived(World par1World, int par2, int par3, int par4, int par5, int par6)
    {
        super.onBlockEventReceived(par1World, par2, par3, par4, par5, par6);
        TileEntity tileentity = par1World.getTileEntity(par2, par3, par4);
        return tileentity != null ? tileentity.receiveClientEvent(par5, par6) : false;
    }
    

    public void updateTick(World world, int x, int y, int z, Random p_149674_5_)
    {
		Minecraft.getMinecraft().renderGlobal.markBlockForUpdate(x, y, z);
		world.markBlockForUpdate(x, y, z);
    }
    
    

	public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int face, float posX, float posY, float posZ)
	{
		System.out.println("Activated!");
		ItemStack item = player.getHeldItem();
		if(!(item.getItem() instanceof IColouring))
			return false;
		if(!world.isRemote)
			if(!player.isSneaking())
			{
				TileEntity te = world.getTileEntity(x, y, z);
				if(te instanceof TileEntityColoured)
				{
					((TileEntityColoured) world.getTileEntity(x, y, z)).setColor(((IColouring) item.getItem()).getColour(item));
					Minecraft.getMinecraft().renderGlobal.markBlockForUpdate(x, y, z);
					world.markBlockForUpdate(x, y, z);p
					player.getItemInUse().damageItem(1, par2EntityPlayer);
					return true;
				}
			}
			else;
		UpdateThread ut = new UpdateThread(world, x, y, z, 100);
		ut.start();
		return false;
	}

	@Override
	public void clearColour(World world, int x, int y, int z, EntityPlayer player) 
	{	
		if(!world.isRemote)
		{
			TileEntity te = world.getTileEntity(x, y, z);
			if(te instanceof TileEntityColoured)
				((TileEntityColoured) te).setColor(Color.WHITE);
		}
	}

	@SideOnly(Side.CLIENT)
	public int colorMultiplier(IBlockAccess access, int x, int y, int z)
	{
		TileEntity te = access.getTileEntity(x, y, z);
		if(te instanceof TileEntityColoured)
		{
			return ((TileEntityColoured) te).getColor();
		}
		return 16777215;
	}

	@Override
	public Color getColour(World world, int x, int y, int z, EntityPlayer player) {
		if(!world.isRemote)
		{
			TileEntity te = world.getTileEntity(x, y, z);
			if(te instanceof TileEntityColoured)
				return ((TileEntityColoured) te).color;
		}
		return Color.WHITE;
	}
	
    @SideOnly(Side.CLIENT)
    public IIcon getIcon(IBlockAccess access, int x, int y, int z, int p_149673_5_)
    {
    	Block below = access.getBlock(x, y - 1, z);
    	if(below == null)
    		return this.blockIcon;
        return below.getIcon(access, x, y - 1, z, p_149673_5_);
    }

}
