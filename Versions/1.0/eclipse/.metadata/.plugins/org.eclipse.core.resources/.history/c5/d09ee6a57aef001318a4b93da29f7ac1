package org.abimon.mods.minecraft.dnc;

import java.awt.Color;
import java.util.List;

import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.StatCollector;
import baubles.api.BaubleType;
import baubles.api.IBauble;

public class ItemDnC extends Item implements IBauble
{
	
    public String getItemStackDisplayName(ItemStack par1ItemStack)
    {
        return formatNicely(getNBT(par1ItemStack).getString("Name"));
    }
    
    public void addInformation(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, List par3List, boolean par4) 
    {
    	System.out.println(getNBT(par1ItemStack).getString("Information"));
    	for(String s : getNBT(par1ItemStack).getString("Information").split("\n"))
    		par3List.add(formatNicely(s));
    }
    
    public int getColorFromItemStack(ItemStack par1ItemStack, int par2)
    {
        return getNBT(par1ItemStack).getInteger("Colour");
    }

    public String formatNicely(String string)
    {
    	String str = string.replace("_&", "\u00a7");
    	str.replace("\\\\", "\\");
    	return str;
    }
	
	public NBTTagCompound getNBT(ItemStack item)
	{
		NBTTagCompound nbt = item.getTagCompound();
		if(nbt == null)
		{
			nbt = new NBTTagCompound();
			nbt.setInteger("Type", 0);
			nbt.setString("Name", "Mundane Amulet of Awesomeness");
			nbt.setString("Information", "Nothing Here!\n" + EnumChatFormatting.GOLD.toString() + EnumChatFormatting.BOLD.toString() + EnumChatFormatting.UNDERLINE.toString() + EnumChatFormatting.ITALIC.toString() + "But We Might Add Something");
			nbt.setInteger("Colour", 16777215);
		}
		item.setTagCompound(nbt);
		return item.getTagCompound();
	}
	
	@Override
	public BaubleType getBaubleType(ItemStack itemstack) 
	{
		switch(getNBT(itemstack).getInteger("Type"))
		{
		case 0:
			return BaubleType.AMULET;
		case 1:
			return BaubleType.BELT;
		case 2:
			return BaubleType.RING;
		}
		return BaubleType.AMULET;
	}

	@Override
	public void onWornTick(ItemStack itemstack, EntityLivingBase player) {
		
	}

	@Override
	public void onEquipped(ItemStack itemstack, EntityLivingBase player) {
		
	}

	@Override
	public void onUnequipped(ItemStack itemstack, EntityLivingBase player) {
		
	}

	@Override
	public boolean canEquip(ItemStack itemstack, EntityLivingBase player) {
		return false;
	}

	@Override
	public boolean canUnequip(ItemStack itemstack, EntityLivingBase player) {
		return false;
	}

}
