package org.abimon.mods.minecraft.dnc;

import java.util.Random;

import net.minecraft.entity.IEntityLivingData;
import net.minecraft.entity.monster.EntityWitch;
import net.minecraft.init.Blocks;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;
import net.minecraft.world.gen.structure.ComponentScatteredFeaturePieces;
import net.minecraft.world.gen.structure.StructureBoundingBox;
import net.minecraft.world.gen.structure.StructureComponent;

public class DnCStructures 
{
	public static abstract class Feature extends StructureComponent{
		/** The size of the bounding box for this feature in the X axis */
		protected int scatteredFeatureSizeX;
		/** The size of the bounding box for this feature in the Y axis */
		protected int scatteredFeatureSizeY;
		/** The size of the bounding box for this feature in the Z axis */
		protected int scatteredFeatureSizeZ;
		protected int field_74936_d = -1;

		public Feature() {}

		protected Feature(Random par1Random, int par2, int par3, int par4, int par5, int par6, int par7)
		{
			super(0);
			this.scatteredFeatureSizeX = par5;
			this.scatteredFeatureSizeY = par6;
			this.scatteredFeatureSizeZ = par7;
			this.coordBaseMode = par1Random.nextInt(4);

			switch (this.coordBaseMode)
			{
			case 0:
			case 2:
				this.boundingBox = new StructureBoundingBox(par2, par3, par4, par2 + par5 - 1, par3 + par6 - 1, par4 + par7 - 1);
				break;
			default:
				this.boundingBox = new StructureBoundingBox(par2, par3, par4, par2 + par7 - 1, par3 + par6 - 1, par4 + par5 - 1);
			}
		}

		protected void func_143012_a(NBTTagCompound par1NBTTagCompound)
		{
			par1NBTTagCompound.setInteger("Width", this.scatteredFeatureSizeX);
			par1NBTTagCompound.setInteger("Height", this.scatteredFeatureSizeY);
			par1NBTTagCompound.setInteger("Depth", this.scatteredFeatureSizeZ);
			par1NBTTagCompound.setInteger("HPos", this.field_74936_d);
		}

		protected void func_143011_b(NBTTagCompound par1NBTTagCompound)
		{
			this.scatteredFeatureSizeX = par1NBTTagCompound.getInteger("Width");
			this.scatteredFeatureSizeY = par1NBTTagCompound.getInteger("Height");
			this.scatteredFeatureSizeZ = par1NBTTagCompound.getInteger("Depth");
			this.field_74936_d = par1NBTTagCompound.getInteger("HPos");
		}

		protected boolean func_74935_a(World par1World, StructureBoundingBox par2StructureBoundingBox, int par3)
		{
			if (this.field_74936_d >= 0)
			{
				return true;
			}
			else
			{
				int j = 0;
				int k = 0;

				for (int l = this.boundingBox.minZ; l <= this.boundingBox.maxZ; ++l)
				{
					for (int i1 = this.boundingBox.minX; i1 <= this.boundingBox.maxX; ++i1)
					{
						if (par2StructureBoundingBox.isVecInside(i1, 64, l))
						{
							j += Math.max(par1World.getTopSolidOrLiquidBlock(i1, l), par1World.provider.getAverageGroundLevel());
							++k;
						}
					}
				}

				if (k == 0)
				{
					return false;
				}
				else
				{
					this.field_74936_d = j / k;
					this.boundingBox.offset(0, this.field_74936_d - this.boundingBox.minY + par3, 0);
					return true;
				}
			}
		}
	}

	public static class SwampHut extends ComponentScatteredFeaturePieces.Feature
	{
		/** Whether this swamp hut has a witch. */
		private boolean hasWitch;
		private static final String __OBFID = "CL_00000480";

		public SwampHut() {}

		public SwampHut(Random par1Random, int par2, int par3)
		{
			super(par1Random, par2, 64, par3, 7, 5, 9);
		}

		protected void func_143012_a(NBTTagCompound par1NBTTagCompound)
		{
			super.func_143012_a(par1NBTTagCompound);
			par1NBTTagCompound.setBoolean("Witch", this.hasWitch);
		}

		protected void func_143011_b(NBTTagCompound par1NBTTagCompound)
		{
			super.func_143011_b(par1NBTTagCompound);
			this.hasWitch = par1NBTTagCompound.getBoolean("Witch");
		}

		/**
		 * second Part of Structure generating, this for example places Spiderwebs, Mob Spawners, it closes
		 * Mineshafts at the end, it adds Fences...
		 */
		public boolean addComponentParts(World par1World, Random par2Random, StructureBoundingBox par3StructureBoundingBox)
		{
			if (!this.func_74935_a(par1World, par3StructureBoundingBox, 0))
			{
				return false;
			}
			else
			{
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 1, 1, 1, 5, 1, 7, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 1, 4, 2, 5, 4, 7, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 2, 1, 0, 4, 1, 0, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 2, 2, 2, 3, 3, 2, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 1, 2, 3, 1, 3, 6, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 5, 2, 3, 5, 3, 6, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 2, 2, 7, 4, 3, 7, Blocks.planks, 1, Blocks.planks, 1, false);
				this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 0, 2, 1, 3, 2, Blocks.log, Blocks.log, false);
				this.fillWithBlocks(par1World, par3StructureBoundingBox, 5, 0, 2, 5, 3, 2, Blocks.log, Blocks.log, false);
				this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 0, 7, 1, 3, 7, Blocks.log, Blocks.log, false);
				this.fillWithBlocks(par1World, par3StructureBoundingBox, 5, 0, 7, 5, 3, 7, Blocks.log, Blocks.log, false);
				this.placeBlockAtCurrentPosition(par1World, Blocks.fence, 0, 2, 3, 2, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.fence, 0, 3, 3, 7, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.air, 0, 1, 3, 4, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.air, 0, 5, 3, 4, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.air, 0, 5, 3, 5, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.flower_pot, 7, 1, 3, 5, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.crafting_table, 0, 3, 2, 6, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.cauldron, 0, 4, 2, 6, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.fence, 0, 1, 2, 1, par3StructureBoundingBox);
				this.placeBlockAtCurrentPosition(par1World, Blocks.fence, 0, 5, 2, 1, par3StructureBoundingBox);
				int i = this.getMetadataWithOffset(Blocks.oak_stairs, 3);
				int j = this.getMetadataWithOffset(Blocks.oak_stairs, 1);
				int k = this.getMetadataWithOffset(Blocks.oak_stairs, 0);
				int l = this.getMetadataWithOffset(Blocks.oak_stairs, 2);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 0, 4, 1, 6, 4, 1, Blocks.spruce_stairs, i, Blocks.spruce_stairs, i, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 0, 4, 2, 0, 4, 7, Blocks.spruce_stairs, k, Blocks.spruce_stairs, k, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 6, 4, 2, 6, 4, 7, Blocks.spruce_stairs, j, Blocks.spruce_stairs, j, false);
				this.fillWithMetadataBlocks(par1World, par3StructureBoundingBox, 0, 4, 8, 6, 4, 8, Blocks.spruce_stairs, l, Blocks.spruce_stairs, l, false);
				int i1;
				int j1;

				for (i1 = 2; i1 <= 7; i1 += 5)
				{
					for (j1 = 1; j1 <= 5; j1 += 4)
					{
						this.func_151554_b(par1World, Blocks.log, 0, j1, -1, i1, par3StructureBoundingBox);
					}
				}

				if (!this.hasWitch)
				{
					i1 = this.getXWithOffset(2, 5);
					j1 = this.getYWithOffset(2);
					int k1 = this.getZWithOffset(2, 5);

					if (par3StructureBoundingBox.isVecInside(i1, j1, k1))
					{
						this.hasWitch = true;
						EntityWitch entitywitch = new EntityWitch(par1World);
						entitywitch.setLocationAndAngles((double)i1 + 0.5D, (double)j1, (double)k1 + 0.5D, 0.0F, 0.0F);
						entitywitch.onSpawnWithEgg((IEntityLivingData)null);
						par1World.spawnEntityInWorld(entitywitch);
					}
				}

				return true;
			}
		}
	}
}
