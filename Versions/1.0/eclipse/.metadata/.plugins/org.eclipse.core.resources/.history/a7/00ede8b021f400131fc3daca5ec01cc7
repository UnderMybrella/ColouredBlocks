package org.abimon.mods.minecraft.dnc;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import com.google.common.collect.Multimap;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.attributes.AttributeModifier;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.EnumAction;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.DamageSource;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.IIcon;
import net.minecraft.util.StatCollector;
import net.minecraft.world.World;
import baubles.api.BaubleType;
import baubles.api.IBauble;

public class ItemDnC extends Item implements IBauble
{

	public static final HashMap<String, IIcon> ICONS = new HashMap<String, IIcon>();

	public String getItemStackDisplayName(ItemStack par1ItemStack)
	{
		return formatNicely(getNBT(par1ItemStack).getString("Name"));
	}

	public void addInformation(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, List par3List, boolean par4) 
	{
		for(String s : getNBT(par1ItemStack).getString("Information").split("\n"))
			par3List.add(formatNicely(s));
	}

	public int getColorFromItemStack(ItemStack par1ItemStack, int par2)
	{
		return getNBT(par1ItemStack).getInteger("Colour");
	}

	public String formatNicely(String string)
	{
		String str = string.replace("_&", "\u00a7");
		str.replace("\\\\", "\\");
		return str;
	}

	public NBTTagCompound getNBT(ItemStack item)
	{
		NBTTagCompound nbt = item.getTagCompound();
		if(nbt == null)
			nbt = new NBTTagCompound();
		if(!nbt.hasKey("Type"))
			nbt.setInteger("Type", 0);
		if(!nbt.hasKey("Name"))
			nbt.setString("Name", "Mundane Amulet of Awesomeness");
		if(!nbt.hasKey("Information"))
			nbt.setString("Information", "Nothing Here!\n" + EnumChatFormatting.GOLD.toString() + EnumChatFormatting.BOLD.toString() + EnumChatFormatting.UNDERLINE.toString() + EnumChatFormatting.ITALIC.toString() + "But We Might Add Something");
		if(!nbt.hasKey("Colour"))
			nbt.setInteger("Colour", 16777215);
		if(!nbt.hasKey("UseDuration"))
			nbt.setInteger("UseDuration", 0);
		if(!nbt.hasKey("UseAction"))
			nbt.setString("UseAction", "none");
		if(!nbt.hasKey("MaxDamage"))
			nbt.setInteger("MaxDamage", 0);
		if(!nbt.hasKey("HungerRestored"))
			nbt.setInteger("HungerRestored", 0);
		if(!nbt.hasKey("Saturation"))
			nbt.setInteger("Saturation", 0);
		if(!nbt.hasKey("EntityLifespan"))
			nbt.setInteger("EntityLifespan", 6000);
		if(!nbt.hasKey("IsConsumable"))
			nbt.setBoolean("IsConsumable", false);
		if(!nbt.hasKey("MobDamage"))
			nbt.setFloat("MobDamage", 1);
		if(!nbt.hasKey("StackLimit"))
			nbt.setInteger("StackLimit", 64);
		if(!nbt.hasKey("PotionEffects"))
			nbt.setTag("PotionEffects", new NBTTagList());
		if(!nbt.hasKey("HealthRestoredWhenEaten"))
			nbt.setInteger("HealthRestoredWhenEaten", 0);
		if(!nbt.hasKey("DamageSourceForPersonal"))
			if(DungeonsAndCreepers.damageSources.containsKey("defaultDamage"))
				nbt.setString("DamageSourceForPersonal", "defaultDamage");
			else
				nbt.setString("DamageSourceForPersonal", "");
		item.setTagCompound(nbt);
		return item.getTagCompound();
	}

	public ItemStack onEaten(ItemStack par1ItemStack, World par3World, EntityPlayer player)
	{
		if(par3World.isRemote)
			return par1ItemStack;

		NBTTagCompound nbt = getNBT(par1ItemStack);
		if(getMaxDamage(par1ItemStack) > 0)
			par1ItemStack.damageItem(1, player);
		else if(nbt.getBoolean("IsConsumable"))
			par1ItemStack.stackSize--;
		player.getFoodStats().addStats(nbt.getInteger("HungerRestored"), nbt.getInteger("Saturation"));
		for(PotionEffect effect : getPotionEffects((NBTTagList) nbt.getTag("PotionEffects")))
			player.addPotionEffect(effect);
		int health = nbt.getInteger("HealthRestoredWhenEaten");
		if(health > 0)
			player.heal(health);
		else if(health != 0)
			if(nbt.getString("DamageSourceForPersonal").equals(""))
				player.attackEntityFrom(DamageSource.magic, health);
			else if(DungeonsAndCreepers.damageSources.containsKey(nbt.getString("DamageSourceForPersonal")))
				player.attackEntityFrom(DungeonsAndCreepers.damageSources.get(nbt.getString("DamageSourceForPersonal")))
		return par1ItemStack;
	}

	public ArrayList<PotionEffect> getPotionEffects(NBTTagList list)
	{	
		ArrayList<PotionEffect> effects = new ArrayList<PotionEffect>();

		if(list == null)
			return effects;

		for(int i = 0; i < list.tagCount(); i++)
		{
			NBTTagCompound nbt = list.getCompoundTagAt(i);
			if(nbt.hasNoTags())
				continue;
			int id = 0;
			if(nbt.hasKey("ID"))
				id = nbt.getInteger("ID");
			else if(nbt.hasKey("Id"))
				id = nbt.getInteger("Id");
			int duration = nbt.getInteger("Duration");
			int amplifier = nbt.getInteger("Amplifier");
			effects.add(new PotionEffect(id, duration, amplifier));
		}
		return effects;
	}

	public ItemStack onItemRightClick(ItemStack par1ItemStack, World par3World, EntityPlayer player)
	{
		System.out.println(this.getMaxItemUseDuration(par1ItemStack));
		player.setItemInUse(par1ItemStack, this.getMaxItemUseDuration(par1ItemStack));
		return par1ItemStack;
	}

	public int getMaxDamage(ItemStack stack)
	{
		return getNBT(stack).getInteger("MaxDamage");
	}

	/**
	 * How long it takes to use or consume an item
	 */
	public int getMaxItemUseDuration(ItemStack par1ItemStack)
	{
		int duration = getNBT(par1ItemStack).getInteger("UseDuration");
		return duration > 32 ? 32 : duration;
	}

	public int getEntityLifespan(ItemStack itemStack, World world)
	{
		return getNBT(itemStack).getInteger("EntityLifespan");
	}

	/**
	 * returns the action that specifies what animation to play when the items is being used
	 */
	public EnumAction getItemUseAction(ItemStack par1ItemStack)
	{
		try
		{
			EnumAction act = EnumAction.valueOf(getNBT(par1ItemStack).getString("UseAction").toLowerCase());
			return act;
		}
		catch(Throwable th)
		{
			return EnumAction.none;
		}
	}


	@Override
	public BaubleType getBaubleType(ItemStack itemstack) 
	{
		switch(getNBT(itemstack).getInteger("Type"))
		{
		case 0:
			return BaubleType.AMULET;
		case 1:
			return BaubleType.BELT;
		case 2:
			return BaubleType.RING;
		}
		return BaubleType.AMULET;
	}

	@Override
	public void onWornTick(ItemStack itemstack, EntityLivingBase player) {

	}

	@Override
	public void onEquipped(ItemStack itemstack, EntityLivingBase player) {

	}

	@Override
	public void onUnequipped(ItemStack itemstack, EntityLivingBase player) {

	}

	@Override
	public boolean canEquip(ItemStack itemstack, EntityLivingBase player) {
		return true;
	}

	@Override
	public boolean canUnequip(ItemStack itemstack, EntityLivingBase player) {
		return false;
	}

	/**
	 * Return the correct icon for rendering based on the supplied ItemStack and render pass.
	 *
	 * Defers to {@link #getIconFromDamageForRenderPass(int, int)}
	 * @param stack to render for
	 * @param pass the multi-render pass
	 * @return the icon
	 */
	@Override
	public IIcon getIconIndex(ItemStack stack)
	{
		NBTTagCompound nbt = getNBT(stack);
		String iconName = nbt.getString("TextureName");
		if(ICONS.containsKey(iconName))
			return ICONS.get(iconName);
		else
			ICONS.put(iconName, DungeonsAndCreepers.items.registerIcon(iconName));
		return ICONS.get(iconName);
	}

	public IIcon getIcon(ItemStack stack, int pass)
	{
		return getIconIndex(stack);
	}

	public boolean hitEntity(ItemStack par1ItemStack, EntityLivingBase beingAttacked, EntityLivingBase attacking)
	{
		beingAttacked.heal(1);
		beingAttacked.attackEntityFrom(DamageSource.causeMobDamage(attacking), getNBT(par1ItemStack).getFloat("MobDamage"));
		return false;
	}

	/**
	 * Gets the maximum number of items that this stack should be able to hold. 
	 * This is a ItemStack (and thus NBT) sensitive version of Item.getItemStackLimit()
	 * 
	 * @param stack The ItemStack
	 * @return THe maximum number this item can be stacked to
	 */
	public int getItemStackLimit(ItemStack stack)
	{
		return getNBT(stack).getInteger("StackLimit");
	}

	public void registerIcons(IIconRegister par1IconRegister)
	{
		Set<String> keys = ICONS.keySet();
		ICONS.clear();
		for(String iconName : keys)
			ICONS.put(iconName, DungeonsAndCreepers.items.registerIcon(iconName));
	}

}
