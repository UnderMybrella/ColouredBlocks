package org.abimon.mods.minecraft.deco;

import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;

import net.minecraft.block.Block;
import net.minecraft.block.BlockAnvil;
import net.minecraft.block.BlockHopper;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderBlocks;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.texture.TextureUtil;
import net.minecraft.client.renderer.tileentity.TileEntityRendererChestHelper;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.src.FMLRenderAccessLibrary;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.IIcon;
import net.minecraft.world.IBlockAccess;
import net.minecraftforge.client.IItemRenderer;
import cpw.mods.fml.client.registry.ISimpleBlockRenderingHandler;
import cpw.mods.fml.common.registry.GameData;

public class DecoRender implements ISimpleBlockRenderingHandler, IItemRenderer {

	@Override
	public void renderInventoryBlock(Block block, int metadata, int modelId,
			RenderBlocks renderer) {
	}

	@Override
	public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z,
			Block block, int modelId, RenderBlocks renderer) {

		TileEntity te = world.getTileEntity(x, y, z);
		if(te instanceof DecoTileEntity)
		{
			DecoTileEntity dte = (DecoTileEntity) te;
			if(dte.using != null && dte.using.getItem() instanceof ItemBlock)
			{
				Block render = ((ItemBlock) dte.using.getItem()).field_150939_a;
				//At this point, it's a block. Soo.... RENDER!!!
				renderStructure(world, x, y, z, render, renderer);
				return true;
			}
		}
		return false;
	}

	public void renderStair(IBlockAccess world, int x, int y, int z, Block block, RenderBlocks renderer)
	{
		renderer.setRenderBounds(0.0, 0.0, 0.0, 1.0, 0.5, 1.0);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(0.0, 0.5, 0.0, 1.0, 1.0, 0.5);
		renderer.renderStandardBlock(block, x, y, z);
	}
	
	public void renderSlab(IBlockAccess world, int x, int y, int z, Block block, RenderBlocks renderer)
	{
		renderer.setRenderBounds(0.0, 0.0, 0.0, 1.0, 0.5, 1.0);
		renderer.renderStandardBlock(block, x, y, z);
	}
	
	public void renderStructure(IBlockAccess world, int x, int y, int z, Block block, RenderBlocks renderer)
	{
		renderer.setRenderBounds(0.1, 0.0, 0.0, 0.9, 0.1, 0.1);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(0.1, 0.0, 0.9, 0.9, 0.1, 1.0);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0.0, 0.0, 0.1, 0.1, 0.1, 0.9);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0.9, 0.0, 0.1, 1.0, 0.1, 0.9);
		renderer.renderStandardBlock(block, x, y, z);
		
		

		renderer.setRenderBounds(0.1, 0.9, 0.0, 0.9, 1.0, 0.1);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(0.1, 0.9, 0.9, 0.9, 1.0, 1.0);
		renderer.renderStandardBlock(block, x, y, z);
	
		renderer.setRenderBounds(0.0, 0.9, 0.1, 0.1, 1.0, 0.9);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0.9, 0.9, 0.1, 1.0, 1.0, 0.9);
		renderer.renderStandardBlock(block, x, y, z);
		
		
		
		renderer.setRenderBounds(0, 0, 0, 0.1, 0.1, 0.1);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0, 0, 0.9, 0.1, 0.1, 1);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(0.9, 0, 0, 1, 0.1, 0.1);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(0.9, 0, 0.9, 1, 0.1, 1);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0, 0.9, 0, 0.1, 1, 0.1);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0, 0.9, 0.9, 0.1, 1, 1);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(0.9, 0.9, 0, 1, 1, 0.1);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(0.9, 0.9, 0.9, 1, 1, 1);
		renderer.renderStandardBlock(block, x, y, z);
		
		
		
		renderer.setRenderBounds(0.0, 0.1, 0.0, 0.1, 0.9, 0.1);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0.9, 0.1, 0.0, 1, 0.9, 0.1);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0.0, 0.1, 0.9, 0.1, 0.9, 1);
		renderer.renderStandardBlock(block, x, y, z);
		
		renderer.setRenderBounds(0.9, 0.1, 0.9, 1, 0.9, 1);
		renderer.renderStandardBlock(block, x, y, z);
	}
	
	@Override
	public boolean shouldRender3DInInventory(int modelId) {
		return false;
	}

	@Override
	public int getRenderId() {
		return DecorationMod.RENDER;
	}
	
	//Items

	@Override
	public boolean handleRenderType(ItemStack item, ItemRenderType type) {
		return true;
	}

	@Override
	public boolean shouldUseRenderHelper(ItemRenderType type, ItemStack item,
			ItemRendererHelper helper) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public void renderItem(ItemRenderType type, ItemStack item, Object... data) {
		NBTTagCompound nbt = item.getTagCompound();
		Block block = GameData.getBlockRegistry().getObject(nbt.getString("Itemstack"));
        IIcon iicon = par1EntityLivingBase.getItemIcon(par2ItemStack, par3);

        if (iicon == null)
        {
            GL11.glPopMatrix();
            return;
        }

        texturemanager.bindTexture(texturemanager.getResourceLocation(par2ItemStack.getItemSpriteNumber()));
        TextureUtil.func_147950_a(false, false);
        Tessellator tessellator = Tessellator.instance;
        float f = iicon.getMinU();
        float f1 = iicon.getMaxU();
        float f2 = iicon.getMinV();
        float f3 = iicon.getMaxV();
        float f4 = 0.0F;
        float f5 = 0.3F;
        GL11.glEnable(GL12.GL_RESCALE_NORMAL);
        GL11.glTranslatef(-f4, -f5, 0.0F);
        float f6 = 1.5F;
        GL11.glScalef(f6, f6, f6);
        GL11.glRotatef(50.0F, 0.0F, 1.0F, 0.0F);
        GL11.glRotatef(335.0F, 0.0F, 0.0F, 1.0F);
        GL11.glTranslatef(-0.9375F, -0.0625F, 0.0F);
        renderItemIn2D(tessellator, f1, f2, f, f3, iicon.getIconWidth(), iicon.getIconHeight(), 0.0625F);

        GL11.glDisable(GL12.GL_RESCALE_NORMAL);
        texturemanager.bindTexture(texturemanager.getResourceLocation(par2ItemStack.getItemSpriteNumber()));
        TextureUtil.func_147945_b();
	}

}
